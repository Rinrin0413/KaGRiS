use super::*;

/// The information of the mino.
#[derive(Component)]
pub(crate) struct MinoInfo {
    /// Type of the mino.
    pub(crate) kind: MinoType,
    /// The position of the mino in the board.
    ///
    /// # Note
    ///
    /// `UVec2(0.0, 0.0)` is:
    ///
    /// ```text
    /// Here
    /// ↓
    /// □■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■ -- Height 20
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ```
    ///
    /// `UVec2(1.0, 0.0)` is:
    ///
    /// ```text
    ///               Here
    ///                ↓
    /// ■■■■■■■■■□
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■ -- Height 20
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ```
    ///
    /// `UVec2(1.0, 1.0)` is:
    ///
    /// ```text
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■ -- Height 20
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■■
    /// ■■■■■■■■■□
    ///                ↑
    ///              Here
    /// ```
    pub(crate) position: UVec2,
    /// Relative block position in the mino
    ///
    /// # Note
    ///
    /// `UVec2(0.0, 0.0)` is:
    ///
    /// ```text
    /// Here
    /// ↓
    /// □■■■
    /// ■■■■
    /// ```
    ///
    /// `UVec2(1.0, 0.0)` is:
    ///
    /// ```text
    ///     Here
    ///      ↓
    /// ■■■□
    /// ■■■■
    /// ```
    ///
    /// `UVec2(0.0, 1.0)` is:
    ///
    /// ```text
    /// ■■■■
    /// □■■■
    /// ↑
    /// Here
    /// ```
    ///
    /// `UVec2(1.0, 1.0)` is:
    ///
    /// ```text
    /// ■■■■
    /// ■■■□
    ///      ↑
    ///    Here
    /// ```
    pub(crate) part: UVec2,
    /// Whether the mino is controlled
    pub(crate) is_controlled: bool,
}

impl MinoInfo {
    /// Creates a new controlled `MinoInfo`.
    pub(crate) fn new(kind: MinoType, position: UVec2, part: UVec2) -> Self {
        Self {
            kind,
            position,
            part,
            is_controlled: true,
        }
    }
}
